Exception hierarchy
----------------------
1. Throwable 
2. a. Exception b. Error
3. a. Exception --> a.checked and unchecked b. Error --> a.VirtualMachine Error b. AssertionError

 Checked and Unchecked exception : 
 Checked --> these are checked at the compile time and if the exception is of checked type then the programmer must have to use the throws keyword or the handle the exception, exception propagation is not implicit
 ex. File related exceptions like FileNotFoundException, SQLException, IOExcpetion (Just remember like trying to access any resource and user is doing something wrong then checked exceptions will happen)
 
 Unchecked --> these are the exceptions which are checked at the runtime operations, and for these the implicit propagation is possible,
 and in c++ all the exceptions are unchecked and programer need not to bother a lot, but for the systematic way java checked excpetions must be either handled by the programmer or He/She should let the jvm to handle by mentioning the throws keyword
 
 ex. ArithmaticException
 
 **Our Custom exceptions should be made checked or unchecked?**<br>
 <hr>
 If the user is able to recover from the exception then make it checked, if the end user can't do anything with the exception then make that exception as the unchecked
 
**Difference between the error and exception** <br> <hr>
Error : Serious problems that an Application should not try to catch the errors
Exception : An application can catch exceptions and they can at least try to handle it 

ClassNotFound vs NoClassDefinitionFound
-------------------------------------------
NoClassDefinitionFound --> will occur when the class is present at the compile time and not present at the runtime 
ClassNotFoundException --> when you try to load some classes using the methods like Class.forName() during the run time but the class is not found in the classpath 

Default exception handler 
-------------------------------
When there is some exception in occured in the method, method creates an object of the respective exception and throws it to the jvm, if the programmer has not written a logic to handle the exception, then the default exception handler will handle the exception object thrown and displays the content of the exception object, before this the exception will be propagated till the end 

try catch block 
---------------------
try {
}
catch(Exception exception) {
}
Try block must be either fallowed by the catch or the finally block, one try can have multiple catch blocks so that, the perticular 
specific exception can be catched 

and no matter what, the finally block will be executed whether the exception occures or not 

Custom Exception
-------------------
1. In order to throw an object, the object should contain the properties of the throwable interface
2. 


