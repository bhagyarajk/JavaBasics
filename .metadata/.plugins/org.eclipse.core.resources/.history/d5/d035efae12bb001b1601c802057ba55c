3 methods of the object class has been overridden in the string class
they are : 
1. hashcode() -> overridden to gen the hascode based on the content 
2. equals() -> compare the objects based on the content
3. toString() -> to display the content of the object 

Constructors of the String class 
--------------------------------------
new String()
new String("Literal")
new String(character array)

Methods of the String class 
-------------------------------
There are many methods in the string class But here I have mentioned only the most commenly used ones

1. boolean equalsIgnoreCase(String) -> equals method, case in-sensitive
2. char charAt(int index)
3. char[] toCharArray() 
4. boolean startsWith(String literal)
5. boolean endsWith(String literal)
6. String toLowerCase(String var)
7. String toUpperCase(String var)
8. int codePointAt(int index) -> returns the unicode value for the char at the given index
9. int comparesTo(String var) -> compares two strings based on their unicode values 
returns > 0 if the  unicode value is greater for the 1st string under comparison
returns < 0 if the unicode value of the 2nd String under comparison is greater than the first one
ex. 
String var1 = "Hello";
String var2 = "hello";
var1.comparesTo(var2) // returns -32 
10. String replace(String src, String dest) -> replace the src String with the dest string and regex in the first param not allowed
11. String replaceAll(String src, String dest) -> replace the src String with the dest string regex in the first param allowed
12. String subString(int sp, int ep) -> starting point and the ending point










concept of scp and heap
--------------------------
1. String is the only class in the entire java where you can create the objects by using new and without using new 
2. Whenever you use the new keyword an object is created in the heap
3. Every time you use new keyword a new object of the string in created in the heap
4. If you create the object using the string literals then the object will be created in the string constant pool only if the object with that content
not already exists, if the object with that content already exists the same object is returned 
5. because of this behavior of the scp, we need to make the string object immutable
------------------------------------------------------------------------------------------

Why we need to have this seperate scp for strings

1. In the day to day activities, string object is the most commenly used object 
2. And creating the string object every time is costlier for the memory 
3. When the object with the same content already exists then, why are you creating the object again and again 
4. but there is an issue with this concept, the same object is being returned for many queries, what will happen if any one of the user changes 
the object which is actually shared by many of the users, in this time we need string object to be immutable --> meaning if somebody want's to change 
the content of the string class object, with those new changes the new object should be created at the run time and the original object remains 
unchanged or immutable 

so to conclude 
----------------------
1. In order to return the same object when the object with than content already exits we have scp
2. In order to avoid the shared object modification by any one of the user we made the string immutable 
3. String var1 = new String("Hello"); --> two objects are created one in heap and another in scp (for reusability purpose)
4. 
String var1 = new String("world");
String var2 = new String("world");
String var3 = "world";
String var4 = "world";

Just because of the first line how many objects created --> 2 one in heap and other in scp
because of the second line --> again 1 object is created in heap and in the scp the same object is been reused 
because of the third line --> no objects created, same object from the scp re-used
because of the fourth line --> no objects created, same object in the scp re-used

var1 points to the object in the heap area
var2 points to another object in the heap area
var3 and var4 points to the same object in scp area

ex 2. 
String var1 = new String("Hello");
var1.concat("World");
var1 = var1.concat("World");

Now how the objects are created ?
------------------------------------
Ans : 
* Just because of the first line there are 2 objects created one in heap and other in the scp and var1 points to the object in the heap and jvm maintains the internal ref for the objects in scp
* because of the second line --> You can see that the literals are used, so object with content World is created in the scp, and as you are trying to 
mutate the object the new object is created in the runtime so the new object with those changes are created in heap

to keep it simple --> because of the second line, one object in scp, and one object in heap with the content HelloWorld so totaly again 2 objects created

* Becuase of the third line, only one object is created in the heap with the changes ie. with HelloWorld and now var1 points to this object in the heap, but in the scp we already have the object with World as the content so it will not created another object --> totaly one object in heap

# because of the first line --> 2 objects
# because of the second line --> 2 objects
# because of the third line --> 1 object 
Total is 5 objects created because of these 3 lines of code

Note : Always runtime operations created objects are created in heap


