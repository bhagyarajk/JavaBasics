1. toString() --> String implementation of the toString() method is used to convert any of the given object to toString()
a. The default behavior of the toString() will return the fully qualified name with the hexadecimal hashcode

Packagename.Classname@Unsigned hexadecimal of the hashcode
Usually we override this toString() method to show the content of the object 

2. hashcode() --> this method will give the hashcode representation of the object
this method will generally converts the address of an  object to an integer using some algorithm
hashcode() method is the native method as it's impossible in java to find out the address of an object

use : searching of the object using the hash of the object makes it faster to find out 
hashcode is unique for each object so you can even compare two objects using this hashcode method 

Address of the object + algorithm ==> Integer representation of the hashcode 
we override this hashcode to generate the hashcode depending on the content of the objects

3. equals() --> This method is used to compare the objects based on the hashcode 
if the hashcode are same then it returns true, otherwise it's false

we generally, override this equals method to compare the contents of the object

Note : whenever we use the ref inside the sop method it will internally call's the toString() method if it's been overriden in that class then it shows the content 
of that object otherwise it shows the fully qualified name of the class with the hexadecimal format of the hashcode

wait(), notify(), notifyAll() --> when you invoke a wait method, then the thread on which this method is been called will wait till it's been notified 
by other threads 
means they will be in the waiting status until some other thread calls the notify() or notifyAll() method


