1. Interface can extends from more than one interface -> there is no ambiguity for methods and constructor chaining hence the multiple inheritance is allowed
2. PASF Rule : methods are public and abstract by default inside the interface where as variables  are public, static and final
3. Interfaces can't be instantiated 
4. Interface also allows concrete methods 
5. At that moment if the dev is not clear about the methods/ the features he can use interface so that he can simply declare that methods which on the later section they can implement them 
6. Use of interfaces increases the security, we are just exposing the important details 

Note 1 : 
1. An empty interface is called marker interface 
2. You may ask why we have marker interfaces in picture : when ever some class implements marker interfaces it 
instructs the jvm to treat those classes as special 
ex. java.io.Serializable --> is a marker interface when a class implements this, jvm understands that this class may be serialized

3. After java 1.5 the use of marker interfaces has reduced due to the introduction of : Java annotations 
4. So basically marker interfaces are used to instruct the jvm for the special behavior at the runtime
 ex. Clonable, Serializable, RandomAccess
Note 2 : 
Interfaces are pure abstract till 1.7v after 1.8v they allows the concrete methods also but the concrete methods must be either static or default 

Note 3 : An interface which contains only one abstract method is called the functional interface 
ex. Runnable, Callable, Comparable

Note 4 : 

Diff between Abstract class and Interfaces 
--------------------------------------------

1. In abstract class constructors are allowed where are there are no constructors for interfaces
2. 