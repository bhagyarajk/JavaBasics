({
      getObjects: function(component, event, helper) {
          component.set("v.Spinner",true);
       var action = component.get("c.getAllObjects");
        var choices=[];
        action.setCallback(this, function(response) {
            var state = response.getState();
            console.log(response.getReturnValue());
            if (state == "SUCCESS") {
               var allValues = response.getReturnValue();
                  for (var i = 0; i < allValues.length; i++) {
                    choices.push({
                        label: allValues[i],
                        value: allValues[i]
                    });
                     }
					 
                component.set("v.picklist", choices)
                 component.set("v.Spinner",false)

                 }
            else {
                console.log("Failed with state: " + state);
            }
        });
        $A.enqueueAction(action);
    },
    
    getfields: function(component, event, helper) { 
         component.set("v.Spinner",true);
    var action = component.get("c.getAllFields");
       var selectedObject=component.get("v.selectedObject");
        action.setParams({
            "fld": selectedObject
        });
        var choices=[];
           action.setCallback(this, function(response) {
            var state = response.getState();
            console.log(response.getReturnValue());
            if (state == "SUCCESS") {
             var allValues = response.getReturnValue();
             for (var i = 0; i < allValues.length; i++) {
                     choices.push({
                        label: allValues[i],
                        value: allValues[i]
                    });
            }
                
                component.set("v.fieldslist", choices);
                component.set("v.sortingvalues",choices);
                component.set("v.Spinner",false);
                component.set("v.Filtervalues",choices);


            }
            else {
                console.log("Failed with state: " + state);
            }
        });
        $A.enqueueAction(action);
    },
    
    onFieldChange:function(component, event, helper) {
         var selectedfields=component.get("v.selectedfields");
        var selectedObject=component.get("v.selectedObject");
      
        var queryString='select ';
        var columns=[];
       
         for(var i=0 ;i<selectedfields.length;i++)
           {
            var eachcolumn={};
            eachcolumn.label=selectedfields[i];
            eachcolumn.fieldName=selectedfields[i];
            columns.push(eachcolumn);
            queryString +=selectedfields[i];
            if(i!=selectedfields.length-1){
                 queryString += ',';
            }
        }
         queryString += ' from '+selectedObject;
        
         component.set("v.Query", queryString);
         component.set("v.mycolumns",columns);
    },
    
onFilterSelection:function(component, event, helper){
         var queryString='select ';
         var selectedfields=component.get("v.selectedfields");
        for(var i=0 ;i<selectedfields.length;i++)
        {
          queryString +=selectedfields[i];
            if(i!=selectedfields.length-1){
                 queryString += ',';
            }
        }
         queryString += ' from '+component.get("v.selectedObject");
         var selectedFilter= component.get("v.selectedFilter");
         if(selectedFilter!=null && selectedFilter!=''){
         queryString += ' WHERE '+ component.get("v.selectedFilter");
      switch(component.get("v.Selectedthing"))
      {
          case "startsWith" :
          				      queryString += ' LIKE ' +" '"+ component.get("v.EnteredNumberOrValue")+"%'";
                              break;
          case "endsWith" :
          				      queryString += ' LIKE ' +" '%"+ component.get("v.EnteredNumberOrValue")+"'";
                              break;
          case "contains" :
          				      queryString += ' LIKE ' +" '%"+ component.get("v.EnteredNumberOrValue")+"%'";
                              break;
          case "in" :
          				      queryString += ' IN ' +" ("+ component.get("v.EnteredNumberOrValue")+")";
                              break;
          case "notIn" :
          				      queryString += ' NOT IN ' +" ("+ component.get("v.EnteredNumberOrValue")+")";
                              break;
          case "includes" :
          				      queryString += 'INCLUDES ' +" ("+ component.get("v.EnteredNumberOrValue")+")";
                              break;  
          case "excludes" :
          				      queryString += 'EXCLUDES ' +" ("+ component.get("v.EnteredNumberOrValue")+")";
                              break; 
          case "=" :
          				      queryString += ' = ' +" '"+ component.get("v.EnteredNumberOrValue")+"'";
                              break; 
          case "!=" :
          				      queryString += ' != ' +" '"+ component.get("v.EnteredNumberOrValue")+"'";
                              break; 
          case ">" :
          				      queryString += ' > ' +" '"+ component.get("v.EnteredNumberOrValue")+"'";
                              break;  
          case ">=" :
          				      queryString += ' >= ' +" '"+ component.get("v.EnteredNumberOrValue")+"'";
                              break;  
          case "<" :
          				      queryString += ' < ' +" '"+ component.get("v.EnteredNumberOrValue")+"'";
                              break;  
          case "<=" :
          				      queryString += ' <= ' +" '"+ component.get("v.EnteredNumberOrValue")+"'";
                              break;         
    }
    
        }
    if(component.get("v.selectedSort")!=null && component.get("v.selectedSort")!=''){
         queryString += ' ORDER BY '+component.get("v.selectedSort");
         queryString +=' '+ component.get("v.SelectedOrder") +' '+ component.get("v.SelectedWayToNullsDisplay")+' '+ component.get("v.LimitOfRecords");
    }
         component.set("v.Query", queryString);
      },
       
    ExecuteQuery: function(component, event, helper){
         component.set("v.Spinner",true);
         var action=component.get("c.QueryExecute");
        action.setParams({"queryString" : component.get("v.Query")});
           action.setCallback(this, function(response) {
            var state = response.getState();
            console.log(response.getReturnValue());
            if (state == "SUCCESS") {
               var allValues = response.getReturnValue();
            component.set("v.queryResults", response.getReturnValue());
                 component.set("v.Spinner",false);
               system.debug("response.getReturnValue()");
                 }
            else {
                console.log("Failed with state: " + state);
                  }
        });
        $A.enqueueAction(action);
        
    }    
        
})