These are not the most commonly used commands but sometime they are important 
-----------------------------------------------------------------------------
1.Working directory --> As the name suggests it's just a working directory, that's where our files lives, and it contains untracked,tracked and ignored files (RED) 
For these untracked files we need to atleast add once to the staging area in order to start the tracking
2.Staging area/ Index / Cache (Once you stage the changes) --> (GREEN)
3. Local Repository -> .git directory (After the commit)
checkout the evernoteclip or https://medium.com/@lucasmaurer/git-gud-the-working-tree-staging-area-and-local-repo-a1f0f4822018 for more about the same 
git revert commithash ---> generates a new revert commit rather than deleting the entire new commits, use -e flag to edit the commit message explicitely
git reset --hard commithash --> deletes all the new commits 
git checkout -- filename --> restore the working tree, most common one is git checkout -- . : this command will restore the working directory to be as same as the previous commit (checkout tries to checkout the working tree to the privious commit)
git restore --staged filename or git reset filename  --> to unstage perticular files/ all the files you can use wildcar * : this is simply remove the the files from the staging area but git is still tracking these files
git rm -rf --cached filename(can use * for all and . for the current directory files) --> This is you need to use to delete the file from the staging area, means converts file to untracked file , means git is no more tracking that file 
git status --ignored --> The files ignored by the git some time you need to use the -s flag
git clean -n --> will tell you what will happen when you run git clean command, clean command is used to remove the untracked files
Untracked files : Untracked files are everything else â€” any files in your working directory that were not in your last snapshot and are not in your staging area (Simply its a new file for git)
git clean -n -d -x --> d - for directories x-> for ignored files 
becarefull while running git clean without the -n flag - it will removed the utracked files from the working directory
git stash command --> this is used to save from the dirty commits : stash is nothing but just to create a draft copy, you can create any number of drafts
git stash --> creates the draft copy but does not apply it
git stash apply --> now the changes done in stash are applied
git stash list --> Lists the stashes
git stash push -m "messege" --> just to identify the purpose of the stash we can use this, this will not push the stash anywhere
git stash apply indexnumber -> apply the perticular stash
git stash drop indexnumber --> drop the stash
git commit --amend --> change the commit msg
git pull origin master --allow-unrelated-histories

Note : ref and reflog 
ref --> anything which points to the commit, you can use this ref as an alternative of using the commit hash, Head@2 means this is the reflog : which tells
the commit hash that the Head was pointing before two shifts(before updating the head 2 times)
.git/refs/heads --> will contain the branch names which intern contains the latest commits or the tip of the branch
